# LOOK HERE:
# https://sunnnychan.github.io/cheatsheet/linux/config/alacritty.yml.html


env:
  TERM: xterm-256color


tabspaces: 4


# font:
#   normal:
#     family: SauceCodePro Nerd Font Mono
#     style: Medium
#   bold:
#     family: SauceCodePro Nerd Font Mono
#     style: Bold
#   italic:
#     family: SauceCodePro Nerd Font Mono
#     style: Italic
#   bold_italic:
#     family: SauceCodePro Nerd Font Mono
#     style: Bold Italic
#   size: 12

font:
  normal:
    family: Source Code Pro
    style: Medium
  bold:
    family: Source Code Pro
    style: Bold
  italic:
    family: Source Code Pro
    style: Italic
  bold_italic:
    family: Source Code Pro
    style: Bold Italic
  size: 12

draw_bold_text_with_bright_colors: true

decorations: full


hints:
  launcher: /usr/bin/vivaldi-stable
  args: []


mouse.hide_while_typing: true

cursor:
  #  ▇  Block
  #  _  Underline
  #  |  Beam
  style:            Block
  unfocused_hollow: true


scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 20000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  #multiplier: 3

  # Scroll to the bottom when new text is written to the terminal.
  #auto_scroll: false


visual_bell:
  animation: EaseOutExpo
  # duration of 0 disables the visual bell
  duration: 0
  color: '0xffffff'


selection:
  #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true



shell:
  program: /bin/fish
  dynamic_title:      true

    # background_opacity:     0.92
window:
  opacity:     0.85


# Colors (Ubuntu)
colors:
  # Default colors
  primary:
    background: '0x1a1b26'
    foreground: '0xa9b1d6'

  # Normal colors
  normal:
    black:   '0x32344a'
    red:     '0xf7768e'
    green:   '0x9ece6a'
    yellow:  '0xe0af68'
    blue:    '0x7aa2f7'
    magenta: '0xad8ee6'
    cyan:    '0x449dab'
    white:   '0x787c99'

  # Bright colors
  bright:
    black:   '0x444b6a'
    red:     '0xff7a93'
    green:   '0xb9f27c'
    yellow:  '0xff9e64'
    blue:    '0x7da6ff'
    magenta: '0xbb9af7'
    cyan:    '0x0db9d7'
    white:   '0xacb0d0'

window_opacity: 0.97

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true



mouse_bindings:
  - { mouse: Middle, action: PasteSelection }


# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
    # (Windows, Linux, and BSD only)
  - { key: V,         mods: Control|Shift, action: Paste                      }
  - { key: C,         mods: Control|Shift, action: Copy                       }
  - { key: Insert,    mods: Shift,         action: PasteSelection             }
  - { key: Key0,      mods: Control,       action: ResetFontSize              }
  - { key: Equals,    mods: Control,       action: IncreaseFontSize           }
  - { key: Plus,      mods: Control,       action: IncreaseFontSize           }
  - { key: Minus,     mods: Control,       action: DecreaseFontSize           }
  - { key: F11,       mods: None,          action: ToggleFullscreen           }
  - { key: Paste,     mods: None,          action: Paste                      }
  - { key: Copy,      mods: None,          action: Copy                       }
  - { key: L,         mods: Control,       action: ClearLogNotice             }
  - { key: L,         mods: Control,       chars: "\x0c"                      }
    # { key: PageUp,    mods: None,          action: ScrollPageUp,   mode: ~Alt  }
    # { key: PageDown,  mods: None,          action: ScrollPageDown, mode: ~Alt  -
  - { key: Home,      mods: Shift,         action: ScrollToTop,    mode: ~Alt }
  - { key: End,       mods: Shift,         action: ScrollToBottom, mode: ~Alt }
  - { key: N,         mods: Control|Shift, action: SpawnNewInstance           }
